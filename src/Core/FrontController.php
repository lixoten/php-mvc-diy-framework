<?php

namespace Core;

use App\Helpers\DebugRt;
use Core\Exceptions\PageNotFoundException;
use Core\Http\HttpFactory;
use Psr\Container\ContainerInterface;
use Psr\Http\Server\RequestHandlerInterface;
use Core\RouterInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use App\Services\Interfaces\PageRegistryInterface;

use function DI\add;

class FrontController implements RequestHandlerInterface
{
    protected RouterInterface $router;
    protected $httpFactory;
    protected PageRegistryInterface $pageRegistry; // Dynamic-me
    protected ContainerInterface $container;

    public function __construct(
        RouterInterface $router,
        HttpFactory $httpFactory,
        PageRegistryInterface $pageRegistry,
        ContainerInterface $container
    ) {
        $this->router = $router;
        $this->httpFactory = $httpFactory;
        $this->pageRegistry = $pageRegistry;
        $this->container = $container;
        $this->registerRoutes();
    }

    // public function handle(ServerRequestInterface $request): ResponseInterface
    // {
    //     return $this->router->dispatch($request);
    // }


    /**
     * Handle the request by dispatching to the appropriate controller action.
     * This method is now the final step after routing middleware has run.
     *
     * @param ServerRequestInterface $request The request object, potentially with route attributes
     * @return ResponseInterface The response generated by the controller action
     * @throws PageNotFoundException If no route was matched or controller/action is invalid
     */
    public function handle(ServerRequestInterface $request): ResponseInterface // <-- Refactored method
    {
        // Get route parameters added by RoutingMiddleware
        $routeParams = $request->getAttribute('route_params');

        // Check if routing middleware found a match and added parameters
        if (
            $routeParams === null
            || !isset($routeParams['controller_class'])
            || !isset($routeParams['action_method'])
        ) {
            // No route matched, or essential parameters are missing
            throw new PageNotFoundException('Page not found (FrontController)');
        }

        $controllerClass = $routeParams['controller_class'];
        $actionMethod = $routeParams['action_method'];

        // Check if controller class exists
        if (!class_exists($controllerClass)) {
            throw new PageNotFoundException("Controller class '$controllerClass' not found.");
        }
        try {
            // Instantiate the controller using the DI container
            // Pass route_params which the base Controller constructor expects
            $controllerObject = $this->container->make($controllerClass, [
                'route_params' => $routeParams
            ]);

            // Initialize controller with the request if the method exists
            if (method_exists($controllerObject, 'initialize')) {
                $controllerObject->initialize($request);
            }

            // Check if the action method is callable
            //if (!is_callable([$controllerObject, $actionMethod])) {
            // Note-: The magic __call() method is causing is_callable() to lie to you!
            $methodName = $actionMethod . 'Action';
            if (!method_exists($controllerObject, $methodName)) { // The magic __call() method is causing
                                                                  // is_callable() to lie to you!
                throw new PageNotFoundException(
                    "Action method '$methodName' not found or not callable in controller '$controllerClass'."
                );
            }

            // Call the action method, passing the request object
            $result = $controllerObject->$actionMethod($request);

            // Ensure the action returned a ResponseInterface
            if (!$result instanceof ResponseInterface) {
                // Attempt to create a response if a string was returned (legacy support?)
                if (is_string($result)) {
                    $response = $this->httpFactory->createResponse();
                    $response->getBody()->write($result);
                    return $response;
                }
                // Otherwise, it's an invalid return type
                throw new \RuntimeException(
                    "Controller action '$controllerClass::$actionMethod' must return an instance of ResponseInterface."
                );
            }

            return $result;
        } catch (\DI\NotFoundException $e) {
            // Handle container errors (e.g., dependency not found)
            throw new \RuntimeException("Error creating controller '$controllerClass': " . $e->getMessage(), 500, $e);
        } catch (\Throwable $e) {
            // Re-throw other exceptions to be caught by ErrorHandlerMiddleware
            throw $e;
        }
    }


    // Legacy method for backward compatibility
    public function run(string $url): void
    {
        // Create request from URL
        $uri = $this->httpFactory->createUri('http://localhost/' . ltrim($url, '/'));
        $request = $this->httpFactory->createServerRequestFromGlobals()->withUri($uri);

        // Process the request
        $response = $this->handle($request);

        // Emit response
        $emitter = new Http\ResponseEmitter();
        $emitter->emit($response);
    }

    protected function registerRoutes()
    {


        // Route for edit (e.g., /content/posts/edit/11) - THIS MATCHES YOUR URL if changed to /content/posts/edit/11
        // $this->router->add('content/{content_type}/edit/{id:\d+}', [
        //$this->router->add('{content_type}/edit/{id:\d+}', [
        // $this->router->add('{content_type:(?:posts|notes|todos)}/edit/{id:\d+}', [
        //     'controller' => 'GenericCrud',
        //     'action'     => 'edit',
        //     // 'namespace'  => 'App\\Features\\GenericCrud'
        //     'namespace'  => 'GenericCrud'
        // ]);


        // --- Dynamic Pages --- // Dynamic-me
        // Get all registered dynamic pages from the registry
        $dynamicPages = $this->pageRegistry->getAllPages();

        // Loop through the pages and register a route for each slug
        ## http://mvclixo.tv/about
        ## http://mvclixo.tv/terms
        foreach (array_keys($dynamicPages) as $pageName) {
            $this->router->add($pageName, [
                'controller' => 'DynamicBasic', // Assuming your controller namespace is correctly resolved
                'action'     => 'page',
                'page_name'   => $pageName, // Pass the slug as page_name
                'route_id' => 'bee801-gen-hc/hc/hc' // ok
            ]);
        }
        // --- End Dynamic Pages --- // Dynamic-me posts
        //$dynamicPages =>['posts']
        $dynamicPages = [
            'posts' => [],
            'stores' => [],
            // Add more pages as needed
        ];

        // Base paths where Generic controller should be used
        $basePaths = [
            'admin/',           // Admin routes
            'account/',  // Account/User routes
            'stores/',  // Store owner routes
            ''                  // Public/root routes
        ];
//'#^account\/(?P<controller>[a-zA-Z]+)$#i'
        // Dynamic-me 3
        foreach (array_keys($dynamicPages) as $pageName) {
            foreach ($basePaths as $basePath) {
                $baseRoute = $basePath . $pageName;
                $routeParams = [
                    'controller' => 'Generic',
                    'namespace'  => 'Generic',  // Consider different namespaces for different paths if needed
                    'page_name'  => $pageName,
                    'route_id' => 'bee802-gen'
                ];

                // Index/List Route
                $this->router->add($baseRoute, array_merge($routeParams, ['action' => 'index']));

                // Index with Pagination
                $this->router->add($baseRoute . '/page/{page:\d+}', array_merge($routeParams, ['action' => 'index']));

                // Add Route
                $this->router->add($baseRoute . '/add', array_merge($routeParams, ['action' => 'add']));

                // Edit Route
                $this->router->add($baseRoute . '/edit/{id:\d+}', array_merge($routeParams, ['action' => 'edit']));

                // Delete Route
                $this->router->add($baseRoute . '/delete/{id:\d+}', array_merge($routeParams, ['action' => 'delete']));
            }
        }


        // Register Home routes
        //$this->router->add('/posts', 'Posts@index');
        //??? $this->router->add('', ['controller' => 'Home', 'action' => 'index']);
        $this->router->add('{controller}/page/{page:\d+}', ['action' => 'index']);
        //$this->router->add('admin/{controller}/{action}');

        ## http://mvclixo.tv/admin/usersxx/boo - notFound
        $this->router->add('admin/{controller}/{action}', [
            'namespace' => 'Admin',
            'route_id' => 'bee100-admin-hc/dyn/hc' // ok
        ]);
        ## http://mvclixo.tv/admin/dashboard
        ## http://mvclixo.tv/admin/users
        ## http://mvclixo.tv/admin/usersxx - notFound
        $this->router->add('admin/{controller}', [
            'namespace' => 'Admin',
            'action' => 'index',
            'route_id' => 'bee101-admin-hc/dyn/hc' // ok
        ]);


        // $this->router->add('stores/posts/{action}', [
        //     'namespace' => 'Account\\Stores',
        //     'controller' => 'Posts'
        // ]);
        // $this->router->add('stores/posts', [
        //     'namespace' => 'Account\\Stores',
        //     'controller' => 'Posts',
        //     'action' => 'index'
        // ]);

        // // Explicit route for Stores controller
        // $this->router->add('stores', [
        //     'namespace' => 'Account',
        //     'controller' => 'Stores',
        //     'action' => 'index'
        // ]);

        // // Explicit route for Stores controller with actions
        // $this->router->add('stores/{action}', [
        //     'namespace' => 'Account',
        //     'controller' => 'Stores'
        // ]);


        // $this->router->add('stores/{controller}/{action}', ['namespace' => 'Store']);
        // $this->router->add('stores/{controller}', ['namespace' => 'Store', 'action' => 'index']);

        // $this->router->add('stores', [
        //     'controller' => 'Stores',
        //     'action' => 'index',
        //     'namespace' => 'App\\Features\\Account\\Stores\\Dashboard'
        // ]);
        // $this->router->add('account/stores', [
        //     'namespace' => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\Stores\\Dashboard',
        //     'controller' => 'xxxxxxxxxxxxxxxxxxxxxxxxxxx',
        //     'action' => 'index'
        // ]);
        // $this->router->add('stores/dashboard', [
        //     // 'namespace' => 'Account\\Stores\\StoreDashboard',
        //     'namespace' => 'StoreDashboard',
        //     'controller' => 'StoreDashboard',
        //     'action' => 'index'
        // ]);



        // // For URL: /admin/albums
        // $this->router->add('admin/{controller}', [
        //     'namespace' => 'Account\\Stores', // Important: Use Stores namespace
        //     'action' => 'index'
        // ]);
        // // admin Albums Edit
        // $this->router->add('admin/{controller}/{action}/{id:\d+}', [
        //     'namespace' => 'Account\\Stores'
        // ]);


        ## http://mvclixo.tv/account/dashboard
        $this->router->add('account/dashboard', [
            'namespace' => 'Account',
            'controller' => 'Dashboard',
            'action' => 'index',
            'route_id' => 'bee200-account-hc/hc/hc', // ok
        ]);
        ## http://mvclixo.tv/account/profile
        $this->router->add('account/profile', [
            'namespace' => 'Account',
            'controller' => 'Profile',
            'action' => 'index',
            'route_id' => 'bee210-account-hc/hc/hc', // ok
        ]);
        ## http://mvclixo.tv/dashboard
        $this->router->add('dashboard', [
            'namespace' => 'Account',
            'controller' => 'Dashboard',
            'action' => 'index',
            'route_id' => 'bee211-account-hc/hc/hc', // ok
        ]);
        ## http://mvclixo.tv/profile
        $this->router->add('profile', [
            'namespace' => 'Account',
            'controller' => 'Profile',
            'action' => 'index',
            'route_id' => 'bee212-account-hc/hc/hc', // ok
        ]);


        // For URL: /account/xxxxxx
        ## http://mvclixo.tv/account/posts
        ## http://mvclixo.tv/account/albums
        ## http://mvclixo.tv/account/mynotes
        $this->router->add('account/{controller}', [
            // 'namespace' => 'Account', // Important: Use Account namespace
            'action' => 'index',
            'route_id' => 'bee220-account-hc/dyn/hc', //ok
        ]);
        // Account Albums Edit
        $this->router->add('account/{controller}/{action}/{id:\d+}', [
            // 'namespace' => 'Account'
            'route_id' => 'bee7aaa-account???????-hc/dyn/dyn',
        ]);


        // // For URL: /stores/albums
        // $this->router->add('stores/dashboard', [
        //     'namespace' => 'DashboardStore',
        //     'controller' => 'Dashboard',
        //     'action' => 'index'
        // ]);
        // $this->router->add('dashboard', [
        //     'namespace' => 'DashboardStore',
        //     'controller' => 'Dashboard',
        //     'action' => 'index'
        // ]);
        // ## http://mvclixo.tv/stores/dashboard
        // $this->router->add('stores/albums', [
        //     'namespace' => 'Stores',
        //     'controller' => 'Albums',
        //     'action' => 'index'
        // ]);

        ## http://mvclixo.tv/stores/dashboard
        $this->router->add('stores/dashboard', [
            'namespace' => 'Stores',
            'controller' => 'Dashboard',
            'action' => 'index',
            'route_id' => 'bee300-store-hc/hc/hc', // ok
        ]);
        ## http://mvclixo.tv/stores/profile
        $this->router->add('stores/profile', [
            'namespace' => 'Stores',
            'controller' => 'Profile',
            'action' => 'index',
            'route_id' => 'bee310-store-hc/hc/hc', // ok
        ]);
        ## http://mvclixo.tv/stores/settings
        $this->router->add('stores/settings', [
            'namespace' => 'Stores',
            'controller' => 'Settings',
            'action' => 'index',
            'route_id' => 'bee310-store-hc/hc/hc',
        ]);


        ## http://mvclixo.tv/stores/xxxxx
        ## http://mvclixo.tv/stores/albums
        ## http://mvclixo.tv/stores/posts
        $this->router->add('stores/{controller}', [
            // 'namespace' => 'Stores',
            'action' => 'index',
            'route_id' => 'bee320-store-hc-dyn-hc',
        ]); // ok
        $this->router->add('stores/{controller}/{action}', [
            // 'namespace' => 'Stores',
            'route_id' => 'bee901-root-hc-dyn-dyn',
        ]);
        // Stores Albums Edit
        $this->router->add('stores/{controller}/{action}/{id:\d+}', [
            // 'namespace' => 'Stores'
            'route_id' => 'bee902-root-hc-dyn-dyn',
        ]);




        // $this->router->add('account/{controller}', [
        //     'namespace' => 'Account\\Stores',
        //     'action' => 'index'
        //     ]);
        // //$this->router->add('account/{controller}/{action}', ['namespace' => 'Account']);




        // $this->router->add('stores/{controller}', ['namespace' => 'Account\\Stores', 'action' => 'index']);
        // $this->router->add('stores/{controller}/{action}', ['namespace' => 'Account\\Stores']);


        // Albums
        //.. $this->router->add('stores/{controller}', ['action' => 'index']);
        //.. $this->router->add('stores/{controller}/{action}');
        // Albums Edit
        //.. $this->router->add('stores/{controller}/{action}/{id:\d+}');



        $this->router->add('account/xxxxxxxxxxxxxxxxxxx', [
            'namespace' => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\Stores\\Dashboard',
            'controller' => 'xxxxxxxxxxxxxxxxxxxxxxxxxxx',
            'action' => 'index',
            'route_id' => 'bee2-root',
        ]);

        // // Account Level
        // $this->router->add('account/{controller}', ['namespace' => 'Account', 'action' => 'index']);
        // $this->router->add('account/{controller}/{action}', ['namespace' => 'Account']);


        #Single record with ID
        $this->router->add('{controller}/{action}/{level:\d}{exe:j|n}{pageid:\d\d\d\d}/{returnid:\d\d\d\d}/{id:\d+}');



        // Auth routes
        $this->router->add('login', [
            'namespace' => 'Auth',
            'controller' => 'Login',
            'action' => 'index',
            'route_id' => 'bee500-login-hc/hc/hc', //ok
        ]);

        $this->router->add('logout', [
            'namespace' => 'Auth',
            'controller' => 'Login',
            'action' => 'logout',
            'route_id' => 'bee501-logout-hc/hc/hc', //ok
        ]);


        $this->router->add('registration', [
            'namespace' => 'Auth',
            'controller' => 'Registration',
            'action' => 'index',
            'route_id' => 'bee502-registration-hc/hc/hc', //ok
        ]);

        // Success page route (optional)
        $this->router->add('registration/success', [
            'namespace' => 'Auth',
            'controller' => 'Registration',
            'action' => 'success',
            'route_id' => 'bee503-registration-hc/hc/hc',
        ]);


        // Email verification routes
        $this->router->add('verify-email/verify', [
            'namespace' => 'Auth',
            'controller' => 'EmailVerification',
            'action' => 'verify',
            'route_id' => 'bee504-verify-hc/hc/hc',
        ]);

        $this->router->add('verify-email/pending', [
            'namespace' => 'Auth',
            'controller' => 'EmailVerification',
            'action' => 'pending',
            'route_id' => 'bee505-pending-hc/hc/hc', //ok
        ]);

        $this->router->add('verify-email/resend', [
            'namespace' => 'Auth',
            'controller' => 'EmailVerification',
            'action' => 'resend',
            'route_id' => 'bee506-resend-hc/hc/hc', //ok
        ]);

        // // Dynamic-me
        // $dynamicPages = ['about', 'terms', 'privacy', 'contact', 'faq'];
        // foreach ($dynamicPages as $page) {
        //     $this->router->add($page, [
        //         'controller' => 'Dynamic',
        //         'action' => 'page',
        //         'page_name' => $page
        //     ]);
        // }



        //???$this->router->add('test-logger', ['controller' => 'Home', 'action' => 'testLogger']);
        /**
         * Route for handling key-value parameters
         *
         * This route handles URLs with variable key-value pairs:
         * /controller/action/param/key1/value1/key2/value2/
         *
         * - Only processes complete key-value pairs
         * - Unpaired parameters are ignored
         * - Both keys and values are restricted to word characters (letters, numbers, underscore)
         *
         * Access in controller:
         *   $this->route_params['key1'], $this->route_params['key2'], etc.
         */
        $this->router->add('{controller}/param/{args:[\w+\/\w+\/]*}', [
            'action' => 'index',
            'route_id' => 'bee900-dyn/hc/dyn',
        ]);
        $this->router->add('{controller}/{action}/param/{args:[\w+\/\w+\/]*}', [
            'route_id' => 'bee901-dyn/dyn/dyn',
        ]);

        // AJAX Save Feature - JS
        // $this->router->add('testys/ajax-save-draft', [ // js-feature
        //     'namespace' => 'Testys',
        //     'controller' => 'Testys',
        //     'action' => 'ajaxSaveDraft',
        //     'methods' => ['POST'],
        // ]);

        // ADD THIS NEW ROUTE FOR THE RESTFUL-STYLE UPDATE
        $this->router->add('testys/edit/{id:\d+}/update', [
            'namespace' => 'Testys',
            'controller' => 'Testys',
            'action' => 'update',
            // 'methods' => ['POST'], // Use POST for compatibility
        ]);


        ## Edit page


        // $this->router->add('stores/{controller}/{action}/{id:\d+}', ['namespace' => 'Account\\Stores']);


        $this->router->add('{controller}/{action}/{id:\d+}', [
            'route_id' => 'bee902-dynfully'
        ]);
        // http://mvclixo.tv/home/test/badrequest
        // http://mvclixo.tv/home/test/validation
        $this->router->add('{controller}/{action}/{textid:\w+}', [
            'route_id' => 'bee903-dynfully'
        ]); // ok
        //$this->router->add('admin/{controller}/{action}/{id:\d+}');

        // Define the default action route (without action)
        // http://mvclixo.tv/home
        // http://mvclixo.tv/contact
        // http://mvclixo.tv/testy
        ## http://mvclixo.tv/posts ---- user
        ## http://mvclixo.tv/albums ---- user
        $this->router->add('{controller}', ['action' => 'index', 'route_id' => 'bee904-na/dyn/hc-noaction']); //ok

        // http://mvclixo.tv/
        // http://mvclixo.tv/home/index
        // http://mvclixo.tv/home/test
        // http://mvclixo.tv/contact/direct
        // http://mvclixo.tv/testy/placeholder
        // http://mvclixo.tv/testy/testlogger
        $this->router->add('{controller}/{action}', ['route_id' => 'bee999-na/dyn/dyn-noparms']); //ok
    }
}

/*
http://localhost/testy/param/ddd/ddddd
http://localhost/testy/test/parm/hhh/hhhh
*/
