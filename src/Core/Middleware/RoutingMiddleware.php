<?php

declare(strict_types=1);

namespace Core\Middleware;

use Core\RouterInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;

/**
 * Routing Middleware
 *
 * Matches the incoming request URI against defined routes and adds
 * the matched parameters to the request attributes.
 */
class RoutingMiddleware implements MiddlewareInterface
{
    private RouterInterface $router;

    /**
     * Constructor
     *
     * @param RouterInterface $router The router service
     */
    public function __construct(RouterInterface $router)
    {
        $this->router = $router;
    }

    /**
     * Process the request to perform routing
     *
     * @param ServerRequestInterface $request The incoming request
     * @param RequestHandlerInterface $handler The next handler in the pipeline
     * @return ResponseInterface The response generated by the pipeline
     */
    public function process(
        ServerRequestInterface $request,
        RequestHandlerInterface $handler
    ): ResponseInterface {
        // Attempt to match the request using a new method on the router
        // Note: We will create/refactor this matchRequest method in Phase 2
        $routeParams = $this->router->matchRequest($request); // Assuming matchRequest exists/will exist

        if ($routeParams !== null) {
            // Add the full parameters array as an attribute
            $request = $request->withAttribute('route_params', $routeParams);

            // Add common individual parameters as attributes for convenience
            $request = $request->withAttribute('namespace', $routeParams['namespace'] ?? null);
            $request = $request->withAttribute('controller', $routeParams['controller'] ?? null);
            $request = $request->withAttribute('action', $routeParams['action'] ?? null);
            $request = $request->withAttribute('id', $routeParams['id'] ?? null);

            $request = $request->withAttribute('page_key', $routeParams['page_key'] ?? null);
            $request = $request->withAttribute('page_config_key', $routeParams['page_config_key'] ?? null);
            // notes-: 'page_name', We could but we do not set in '$this->router->add'
            // $tmpPageKey = strtolower($routeParams['controller'] . '_' . $routeParams['action']);
            // $request = $request->withAttribute('page_key', $tmpPageKey);

            $request = $request->withAttribute('route_id', $routeParams['route_id'] ?? null);
            // Add any other frequently used parameters if needed
        }
        // If no route matched, $routeParams is null, and no attributes are added.
        // The FrontController (or subsequent middleware/handler) will handle the 404.

        // Pass the (potentially updated) request to the next handler
        return $handler->handle($request);
    }
}